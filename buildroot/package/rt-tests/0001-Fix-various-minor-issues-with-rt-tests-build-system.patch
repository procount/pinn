From eb47c07e9d20e0b1a6cc4b0df26f24f22f024f1c Mon Sep 17 00:00:00 2001
From: Alexey Brodkin <abrodkin@synopsys.com>
Date: Mon, 10 Nov 2014 11:44:55 +0300
Subject: [PATCH] Fix various minor issues with rt-tests build system

The issues fixed are :

 * Remove the automatic NUMA detection from the host
   architecture. This is broken when doing cross-compilation. One can
   still set NUMA=1 if NUMA support is desired.

Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
Cc: Peter Korsgaard <peter@korsgaard.com>
[Romain:
    rebase on v1.0
    Remove HASPYTHON since PYLIB can be overriden from the environment]
Signed-off-by: Romain Naour <romain.naour@gmail.com>
---
 Makefile | 19 -------------------
 1 file changed, 19 deletions(-)

diff --git a/Makefile b/Makefile
index a54d82b..0946f93 100644
--- a/Makefile
+++ b/Makefile
@@ -38,25 +38,6 @@ else
 	CFLAGS	+= -O0 -g
 endif
 
-# We make some gueses on how to compile rt-tests based on the machine type
-# and the ostype. These can often be overridden.
-dumpmachine := $(shell $(CC) -dumpmachine)
-
-# The ostype is typically something like linux or android
-ostype := $(lastword $(subst -, ,$(dumpmachine)))
-
-machinetype := $(shell echo $(dumpmachine)| \
-    sed -e 's/-.*//' -e 's/i.86/i386/' -e 's/mips.*/mips/' -e 's/ppc.*/powerpc/')
-
-# The default is to assume you have libnuma installed, which is fine to do
-# even on non-numa machines. If you don't want to install the numa libs, for
-# example, they might not be available in an embedded environment, then
-# compile with
-# make NUMA=0
-ifneq ($(filter x86_64 i386 ia64 mips powerpc,$(machinetype)),)
-NUMA 	:= 1
-endif
-
 # The default is to assume that you have numa_parse_cpustring_all
 # If you have an older version of libnuma that only has numa_parse_cpustring
 # then compile with
-- 
2.5.5

